version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: ferryflow-postgres
    environment:
      POSTGRES_USER: ferryflow
      POSTGRES_PASSWORD: ferryflow_dev_2024
      POSTGRES_DB: ferryflow_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/internal/database/migrations:/migrations
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ferryflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ferryflow-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ferryflow-backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ferryflow
      DB_PASSWORD: ferryflow_dev_2024
      DB_NAME: ferryflow_dev
      JWT_SECRET: demo-jwt-secret-key-change-in-production
      JWT_ACCESS_TOKEN_DURATION: 15m
      JWT_REFRESH_TOKEN_DURATION: 7d
      SERVER_PORT: 8080
      SERVER_MODE: release
      CORS_ALLOWED_ORIGINS: http://localhost,http://localhost:80,http://frontend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ferryflow-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ferryflow-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - ferryflow-network
    restart: unless-stopped

  # Optional: Redis for session management
  redis:
    image: redis:7-alpine
    container_name: ferryflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ferryflow-network
    restart: unless-stopped

  # Optional: Adminer for database management
  adminer:
    image: adminer
    container_name: ferryflow-adminer
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - ferryflow-network
    restart: unless-stopped

networks:
  ferryflow-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: